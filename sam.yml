AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway connected to a Lambda function

Resources:
  RouterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Events:
        EventAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FEApi
            Path: /{proxy+}
            Method: ANY

  FEApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        ApiKeyRequired: true
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: Frontend API
          version: 1.0.0
        paths:
            /profile:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /profile/{profileId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            
            /profile/{profileId}/student-teams:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /student-team:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            
            /student-team/{studentTeamId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /student-team/{studentTeamId}/members:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /student-team/{studentTeamId}/members/{profileId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /recruitment-round:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /student-team/{studentTeamId}/recruitment-round:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /recruitment-round/{roundId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /opening:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /recruitment-round/{roundId}/opening:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /opening/{openingId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /student-team/{studentTeamId}/team-lead-assign:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /opening/{openingId}/team-lead-assign:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            
            /opening/{openingId}/team-lead-assign/{profileId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"              
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /application:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /opening/{openingId}/application:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /application/{applicationId}:
              get:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              patch:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              delete:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"

            /send-interview-emails/{openingId}:
              post:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
            
            /decrypt/{id}:
              get:
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    payloadFormatVersion: "2.0"
                    type: aws_proxy
                    uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
              options:
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  payloadFormatVersion: "2.0"
                  type: aws_proxy
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterLambda.Arn}/invocations"
        components:
          securitySchemes:
            api_key:
              type: apiKey
              name: x-api-key
              in: header
        security:
          - api_key: []

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref FEApi
          StageName: prod

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref FEApi
          Stage: prod
      Description: Usage plan for this API
      UsagePlanName: MyApiUsagePlan

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value: !Sub "https://${FEApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  ApiKeyId:
    Description: API Key ID
    Value: !Ref ApiKey
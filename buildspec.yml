version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12
  pre_build:
    commands:
      - echo "Installing dependencies..."
      - pip install --upgrade pip
      - "pip install -r backend/lambda/requirements.txt --platform manylinux2014_x86_64 -t backend/lambda/ --only-binary=:all:"
  build:
    commands:
      - echo "Building the Lambda function..."
      - mkdir -p dist
      - cd backend/lambda
      - zip -r ../../dist/function.zip .
      - cd ../..
      - cp env.json dist/
  post_build:
    commands:
      - echo "Deploying the Lambda function..."
      - sam package --template-file sam.yml --s3-bucket onboarder-test-upload-bucket --output-template-file dist/packaged.yml
      - |
        sam deploy --template-file sam.yml \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
          EmailSender=$(jq -r '.RouterLambda.EMAIL_SENDER' env.json) \
          SmtpHost=$(jq -r '.RouterLambda.SMTP_HOST' env.json) \
          SmtpPort=$(jq -r '.RouterLambda.SMTP_PORT' env.json) \
          SmtpUsername=$(jq -r '.RouterLambda.SMTP_USERNAME' env.json) \
          SmtpPassword=$(jq -r '.RouterLambda.SMTP_PASSWORD' env.json) \
          SupabaseUrl=$(jq -r '.RouterLambda.SUPABASE_URL' env.json) \
          SupabaseKey=$(jq -r '.RouterLambda.SUPABASE_KEY' env.json) \
          EncryptionKey=$(jq -r '.RouterLambda.ENCRYPTION_KEY' env.json) \
          ResendKey=$(jq -r '.RouterLambda.RESEND_KEY' env.json)

artifacts:
  files:
    - function.zip
    - packaged.yml
    - appspec.yml
    - env.json
  
  base-directory: dist